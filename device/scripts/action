#!/bin/sh
# Device actions script
# Provides:
# - on-demand SSH tunnel
# - server heartbeat
# - software update
# - information query
# - configuration push
#
# author: walter.dedonato@unina.it

# Import configuration and functions
. ~/conf/dev.conf
. ~/scripts/functions

# Help screen
[ $1 ] || { echo "$(basename $0) <command> [options]" ; exit ; }

# Output command
output ()
{
	if [ $REMOTE ]; then
		nc $NC_OPTS $SERVER $REPLY_PORT		
	else
		cat
	fi
}

# OS depending options
case $DEVID in
LS*)
	NC_OPTS="-nuc"
	KEEP_ALIVE="-K 120"
	WIF="wl0"
;;
NB*)
	NC_OPTS="-q1 -nu"
	KEEP_ALIVE="-o ServerAliveInterval=60 -o ServerAliveCountMax=30"
	WIF="ath0"
	NB=true
;;
WS*)
	NC_OPTS="-q1 -nu"
	KEEP_ALIVE="-o ServerAliveInterval=60 -o ServerAliveCountMax=30"
;;
esac

# Perform action
case $1 in
fwd)	# on-demand SSH tunnel
	ssh $KEEP_ALIVE -N -i $SSH_KEY -R $2:127.0.0.1:22 $USER@$SERVER &
;;
pong)	# Server heartbeat
	date +%s > /tmp/server_last
	echo $2 > /tmp/ip
;;
update)	# Software update
	cd ~

	# Get new bismark package
	scp -q -i $SSH_KEY $USER@$SERVER:~/bismark/device/dev-${DEVID:0:2}-*.tgz /tmp/dev.tgz

	# Remove old scripts and configuration files
	find * -path "conf/*" | sort > /tmp/old
	find * -path "scripts/*" | sort >> /tmp/old
	tar -tzf /tmp/dev.tgz | sort > /tmp/new
	case $DEVID in
	LS*) rm -f $(diff /tmp/old /tmp/new | awk -F- '/^-[a-zA-Z]/{ print $2 }') ;;
	NB*) 
		files=$(diff /tmp/old /tmp/new | awk '/^</{ print $2 }')
		rm -f $files
		remountrw
		rm -f $(echo "$files" | awk '/^</{ print "/ro/root/" $2 }')
		remountro
	;;
	WS*) rm -f $(diff /tmp/old /tmp/new | awk '/^</{ print $2 }') ;;
	esac

	# Extract new package
	tar -xzf /tmp/dev.tgz
	rm /tmp/dev.tgz

	# Apply changes
	crontab conf/crontab
	[ $NB ] && /noxbox/bin/persist_changes

	# Send diff
	{ echo "Files diff:"; diff /tmp/old /tmp/new ; } | output 
	rm /tmp/old /tmp/new

	# Check installed packages
	case $DEVID in
	LS*)
		pkgs=$(grep ^LS ~/conf/packages.conf | cut -f2)
		for pkg in $pkgs; do
			opkg list_installed | grep -q ${pkg%%_*} || opkg install ${pkg%%_*} 
		done
	;;
	esac
;;
info)	# Info reply
	if [ $WIF ]; then	
		case $DEVID in
		LS*) wifi_channel=$(iwlist $WIF channel | awk '/Current/{ print $2 }') ;;
		NB*) wifi_channel=$(iwlist $WIF channel | awk -F'[\(\)]' '/Current/{ print $2 }') ;;
		esac
		wifi_essid=$(iwconfig $WIF | awk -F\" '/ESSID/{ print $2 }')
	fi
	output <<-end
		Version: $(cat ~/VERSION)
		User ID: $(cat ~/USER)
		Wifi $wifi_channel 
		Wifi Essid: $wifi_essid
	end
;;
config)	# Get current configuration
	case $DEVID in
	LS*) 
		channel=$(uci get wireless.wl0.channel)
		ssid=$(uci get wireless.@wifi-iface[0].ssid)
		wpa_psk=$(uci get wireless.@wifi-iface[0].key)
		dec=local
	;;
	NB*)
		grep -q ^channel= /etc/hostapd/hostapd.conf || echo channel=1 >> /etc/hostapd/hostapd.conf
		channel=$(awk -F= '/^channel=/{ print $2 }' /etc/hostapd/hostapd.conf)
		ssid=$(awk -F= '/^ssid=/{ print $2 }' /etc/hostapd/hostapd.conf)
		wpa_psk=$(awk -F\" '{ print $2 }' /etc/hostapd/wpa_psk)
		dec=declare
	;;
	esac
	# awk -F= '! (/^#/ || /^\./) { print $1 }' ~/conf/dev.conf

	# Parse new configuration
	IFS=$'&'
	for param in $2; do
		$dec ${param%=*}=${param#*=}
	done

	# Push new configuration
	case $DEVID in
	LS*) 
		uci set wireless.wl0.channel=$channel
		uci set wireless.@wifi-iface[0].ssid=$ssid
		uci set wireless.@wifi-iface[0].key=$wpa_psk
		uci commit wireless && wifi
	;;
	NB*) 
		mod_conf /etc/hostapd/hostapd.conf channel $channel
		mod_conf /etc/hostapd/hostapd.conf ssid $ssid
		echo "00:00:00:00:00:00\"$wpa_psk" > /etc/hostapd/wpa_psk
		/etc/init.d/hostapd restart
		iwconfig $WIF channel $channel
		persist_files /etc/hostapd/hostapd.conf /etc/hostapd/wpa_psk
	;;
	esac

	# Configuration resume
	output <<-end
		ESSID: $ssid
		Channel: $channel
		WPA_PSK: ${wpa_psk:0:7}...
	end
;;
esac

