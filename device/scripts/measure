#!/bin/bash
# Executes a measurement cycle
# 
# author: walter.dedonato@unina.it

# Load configuration file
. ~/conf/dev.conf

# Measure message generator
# $1 = options
msg () {
	echo "$DEVICE_ID measure $1"
	sleep 3
}

# Get target info
# $1 = category
# $2 = type
# $3 = zone
# $4 = duration
get_target()
{
	# OS depending options
	case $DEVICE_ID in
	LS*) NC_OPTS="-nuc" ;;
	NB*|WS*) NC_OPTS="-q1 -nu" ;;
	esac

	# Send message
	msg "$1 $2 $3 $4" | nc $NC_OPTS $SERVER $PROBE_PORT > /tmp/mreply

	# Get reply
	read dst info wait < /tmp/mreply
	[ $dst ] || return 1 
}

# Create dirs and files
mkdir -p /tmp/measure
[ -e /tmp/measure/counter ] || echo 0 > /tmp/measure/counter

# Get and update count
count=$(cat /tmp/measure/counter)
echo $(( (count + 1) % 288 )) > /tmp/measure/counter

# Random wait
sleep $((RANDOM % 30))

# Globals
xml_file="/tmp/${DEVICE_ID}_$(date +%s).xml"

# Get source IP
src=$(cat /tmp/ip)

# XML file header
cat > $xml_file <<-end
	<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
	<measurements version="1.0">
	        <info deviceid=$DEVICE_ID userid=$USER_ID />
end

## Non invasive measurements ##

# RTT measurement using PING
if get_target Bismark PING $ZONE 10 ; then
	bping $dst | mstats RTT PING $src $dst >> $xml_file
fi

if [ $((count % 6)) -eq 0 ]; then
	# Traceroute
	if get_target Bismark TR $ZONE 0 ; then
		hops=$(btr $dst)
		hops_cnt=$(echo "$hops" | wc -l)
		if [ $hops_cnt -gt 1 ]; then
			cat >> $xml_file <<-end
			        <traceroute srcip=$src dstip=$dst timestamp=$(date +%s) hops=$hops_cnt>
				$(echo "$hops" | awk '{ print "                " $0 }')
			        </traceroute>
			end
		fi
	fi

	# Reverse traceroute
	if get_target Bismark RTR $ZONE 0 ; then
		hops=$(brtr $dst $info)
		hops_cnt=$(echo "$hops" | wc -l)
		if [ $hops_cnt -gt 1 ]; then
			cat >> $xml_file <<-end
			        <traceroute srcip=$dst dstip=$src timestamp=$(date +%s) hops=$hops_cnt>
				$(echo "$hops" | awk '{ print "                " $0 }')
			        </traceroute>
			end
		fi
	fi
fi

## Invasive measurements ##
if [ ! -e /tmp/mlock ]; then 
	# Set measure lock
	echo on > /tmp/mlock

	if [ ${DEVICE_ID:0:2} != LS -a $((count % 4)) -eq 0 ]; then
		# Upstream bitrate using curl and HTTP
		if get_target Bismark HTTPDL $ZONE $HTTP_DURATION ; then
			sleep $wait
			bcurl "http://$dst$info" dw $HTTP_DURATION $DW_KBPS | mstats BITRATE CURL $dst $src | grep -v nan >> $xml_file
		fi

		# Upstream bitrate using curl and HTTP
		if get_target Bismark HTTPUL $ZONE $HTTP_DURATION ; then
			sleep $wait
			bcurl "http://$dst$info" up $HTTP_DURATION $UP_KBPS | mstats BITRATE CURL $src $dst | grep -v nan >> $xml_file
		fi
	fi

	# Release measure lock
	rm /tmp/mlock
fi

# XML file footer
cat >> $xml_file <<-end
	</measurements>
end

# Move file to measure folder
mv $xml_file /tmp/measure


