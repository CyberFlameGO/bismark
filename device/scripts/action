#!/bin/bash
# Device actions script
# Provides:
# - on-demand SSH tunnel
# - server heartbeat
# - software update
# - configuration query/push
#
# author: walter.dedonato@unina.it

# Import configuration and functions
. ~/conf/dev.conf
. ~/scripts/functions

# Help screen
[ $1 ] || { echo "$(basename $0) <command> [options]" ; exit ; }

# Platform depending options
case $DEVICE_ID in
LS*) WIF="wl0"  ;;
NB*) WIF="ath0" ;;
esac

# Perform action
case $1 in
fwd)	# on-demand SSH tunnel
	if [ $2 == ${2#*:} ]; then
		( ssh $KEEP_ALIVE -N -i $SSH_KEY -R $2:127.0.0.1:22 $USER@$SERVER >/dev/null 2>&1 & )
	else
		( ssh $KEEP_ALIVE -N -i $SSH_KEY -R $2 $USER@$SERVER >/dev/null 2>&1 & )
	fi
;;
pong)	# Server heartbeat
	ltime=$(date +%s)
	stime=$(( $3 + 2 ))

	# Check clock synch
	if [ $stime -ne $ltime ]; then
		ltime=$stime
		date -s @$ltime
	fi
	echo $ltime > /tmp/server_last

	# Store public IP 
	echo $2 > /tmp/ip
;;
update)	# Software update
	cd ~

	# Skip if same version
	[ $2 ] && [ $VERSION -eq $2 ] && { echo "Device up to date" | output $1 ; exit ; }

	# Get new bismark package
	scp -q -i $SSH_KEY $USER@$SERVER:~/bismark/device/dev-${DEVICE_ID:0:2}-*.tgz /tmp/dev.tgz

	# Remove old scripts and configuration files
	find * -path "conf/*" | sort > /tmp/old
	find * -path "scripts/*" | sort >> /tmp/old
	tar -tzf /tmp/dev.tgz | sort > /tmp/new
	case $DEVICE_ID in
	LS*) rm -f $(diff /tmp/old /tmp/new | awk -F- '/^-[a-zA-Z]/{ print $2 }' | grep -v 'dev.conf\|rshell\|action\|probe') ;;
	NB*) rm -f $(diff /tmp/old /tmp/new | awk '/^</{ print $2 }' | grep -v 'dev.conf\|rshell\|action\|probe') ;;
	WS*) rm -f $(diff /tmp/old /tmp/new | awk '/^</{ print $2 }' | grep -v 'dev.conf\|rshell\|action\|probe') ;;
	esac

	# Extract new package
	tar -xzf /tmp/dev.tgz
	rm /tmp/dev.tgz

	# Apply changes
	crontab conf/crontab

	# Send diff
	diff /tmp/old /tmp/new | output $1 
	rm /tmp/old /tmp/new

	# Call startup script and set restart flag
	startup
	touch /tmp/restart

	# Check installed packages
	case $DEVICE_ID in
	LS*)
		opkg update
		pkgs=$(grep ^LS ~/conf/packages.conf | cut -f2)
		for pkg in $pkgs; do
			opkg list_installed | grep -q $pkg || opkg install $pkg 
		done
	;;
	esac
;;
config)
	# Modify parameters	
	if [ $2 ]; then 
		if [ $2 == "push" ]; then
			push=1
		else
			# Parse new configuration
			IFS=$'&'
			for param in $2; do
				name=${param%=*}
				value=${param#*=}

				# Check parameter validity
				grep -q "^$name=" conf/dev.conf local.conf || { echo -e "Invalid option $name\n" ; continue ; }
				
				# Assign new value to parameter
				eval $name=$value

				# Check WIFI parameters presence
				[ ${name:0:4} == WIFI ] && push=1

				if [ $value ]; then
					# Store parameter in local.conf
					if grep -q "^$name=" local.conf; then
						# Substitute
						mod_conf local.conf $name "$value"
					else
						# Append
						echo $param >> local.conf
					fi
				elif grep -q "^$name=" local.conf; then
					# Remove parameter from local.conf
					mod_conf local.conf $name
				fi
			done
		fi
	fi

	# Push configuration
	if [ $push ]; then
		case $DEVICE_ID in
		LS*) 
			uci set wireless.wl0.channel=$WIFI_CHANNEL
			uci set wireless.@wifi-iface[0].ssid=$WIFI_SSID
			uci set wireless.@wifi-iface[0].key=$WIFI_PASS
			uci commit wireless && wifi
		;;
		NB*) 
			awk -f /dev/stdin sec=$WIFI_SEC /etc/hostapd/hostapd.conf > /tmp/hostapd.conf <<-end
				/^#/ || /^$/{ next }
				! /^wpa/ && ! /^wep/ && ! /^ssid/ && ! /^channel/ { print }
				END{ 
					print "ssid=$WIFI_SSID"
					print "channel=$WIFI_CHANNEL"
					if (sec == "WPA") {
						print "wpa=1"
						print "wpa_passphrase=$WIFI_PASS"
						print "wpa_key_mgmt=WPA-PSK"
						print "wpa_pairwise=TKIP"
					} else if (sec == "WPA2") {
						print "wpa=2"
						print "wpa_passphrase=$WIFI_PASS"
						print "wpa_key_mgmt=WPA-PSK"
						print "wpa_pairwise=CCMP"
					} else if (sec == "WEP") {
						print "wep_default_key=0"
						if (${WIFI_PASS:0:1} ~ /[0-9]/)
							print "wep_key0=$WIFI_PASS"
						else
							print "wep_key0=\"$WIFI_PASS\""
					}
				}
			end
			mv /tmp/hostapd.conf /etc/hostapd/
			/etc/init.d/hostapd restart
			iwconfig $WIF channel $WIFI_CHANNEL
		;;
		esac
	fi

	# Configuration output
	set | awk -F'=' '(FNR==1){ f+=1 } /=/{ if (f == 1){a[$1]=1} else { if (a[$1] == 1) print $1 "=" $2} }' conf/dev.conf - | output $1
;;
esac

