#!/bin/sh
# Bismark Devices Management script
#
# author: walter.dedonato@unina.it

# Load configuration file
. ~/etc/bdm.conf

# Aliases
query(){ sqlite3 -list $BDM_DB "$1"; }

# Help screen
# $1 = command
function help() 
{
	awk "/^ *$1/{ print }" <<-end
	Syntax:

	    $(basename $0) [options] <command>
	
	Commands:
	
	    tunnel   <dev_id> <on|off>    Open/Close a tunnel to <dev_id> using SSH port forwarding
	
	    console  <dev_id>             Open a console on <dev_id> over the SSH tunnel
	
	    exec     <dev_id> <command>   Execute a shell command on <dev_id>
	
	    info     <dev_id>             Print some information about <dev_id>
	
	    list     [update]             List available devices and tunnels
	
	    swupdate <dev_id> <all|scripts|conf|<file>>   Update software on <dev_id> 
	
	Options:
	
	    -l <prb_port>    Port number to listen on for probe packets (default: $PROBE_PORT)
	    -o <ssh_opts>    Additional SSH options
	    -p <fwd_port>    SSH tunnel port number (default: random)"
	    -t <timeout>     Max seconds to wait for probe packets (default: $PROBE_TIMEOUT)
	end
	exit
}

# Parse command line
function parse()
{
	p=$*

	# Parse options
	while getopts 'l:o:p:t:' flag; do
		case $flag in
		l)
			PROBE_PORT=$OPTARG
		;;
		o)
			SSH_OPTIONS+=" -$OPTARG"
		;;
		p)
			FWD_PORT=$OPTARG
		;;
		t)
			PROBE_TIMEOUT=$OPTARG
		;;
		*)
			echo "Unknown option: $flag $OPTARG"
			help
		;;
		esac
	done
	shift $(( OPTIND - 1 ))	
	
	# Parse commands
	case $1 in
	tunnel)
		[ $2 ] || { echo -e "Missing parameter: dev_id\n"; help tunnel; }
		[ $3 ] || { echo -e "Missing parameter: on|off\n"; help tunnel; }
		[ $3 == "on" ] && start_tunnel $2
		[ $3 == "off" ] && stop_tunnel $2 $4
	;;
	console)
		[ $2 ] || { echo -e "Missing parameter: dev_id\n"; help console; }
		echo "Connecting to $2"
		console $2
	;;
	exec)
		[ $2 ] || { echo -e "Missing parameter: dev_id\n"; help exec; }
		[ $3 ] || { echo -e "Missing parameter: command\n"; help exec; }
		echo "Executing \"${p#* * }\" on $2"
		console $2 ${p#* * }
	;;
	info)
		[ $2 ] || { echo -e "Missing parameter: dev_id\n"; help info; }
		info $2
	;;
	list)	
		list $2
	;;
	swupdate)
		[ $2 ] || { echo -e "Missing parameter: dev_id\n"; help swupdate; }
		swupdate $2 $3
	;;
	*)
		[ $1 ] && echo "Unknown command: $1"
		help
	;;
	esac
}

# Reply to probe packet
# $1 = dev id
# $2 = reply command
# $3 = reply value
function probe_reply()
{
	# Discard first line
	read 
	# Read source ip 
	read ip
	ip=$(echo $ip | awk -F'[\\[\\]]' '{print $4}')
	# Read probe packet
	read id cmd
	# Timeout
	[ $id ] || return 1

	# Update database
	if [ $(query "SELECT id FROM devices WHERE id='$id';") ]; then
		query "UPDATE devices SET ip='$ip',ts='$(date +%s)' WHERE id='$id';"
	else
		query "INSERT INTO devices VALUES('$id','$ip','$(date +%s)');"
	fi

	# If dev_id matches
	if [ $id == $1 ]; then
		echo -e "\nDevice $id ($ip) [$cmd] -> $2 $3" > /dev/stderr
		echo $2 $3 
		return 0
	else
		echo -e "\nDevice $id ($ip) [$cmd] -> pong" > /dev/stderr
		echo pong
		return 2
	fi
}

# Listen for incoming UDP probes
# $1 = dev id
# $2 = reply command
# $3 = reply value
function listen()
{
	[ "$1" == "UPDATE"  ] && echo -n "Listening to probe packets" || echo -n "Waiting for probe packet from device $1"
	
	time=0
	[ -e /tmp/.bp ] || mkfifo /tmp/.bp
	while [ true ]; do
		nc -v -w1 -q0 -nlu -p $PROBE_PORT </tmp/.bp 2>&1 | probe_reply $1 $2 $3 >/tmp/.bp

		[ $? -eq 0 ] && return 0
		[ $((time++)) -eq $PROBE_TIMEOUT ] && { return 1; }

		echo -n "."
	done
}

# Check forwarding port
# $1 = port number
function check_fwd_port()
{
	if [ $(netstat -lnt | grep -c "127.0.0.1:$FWD_PORT\>") -gt 0 ]; then
		return 0
	else
		return 1
	fi
}

# Set a valid SSH forwarding port
function set_fwd_port()
{
	# Test requested port number availability
	if [ $FWD_PORT ]; then
		if (check_fwd_port $FWD_PORT); then
			echo "warning: $FWD_PORT not available"
		else
			return 0
		fi
	fi

	# Find a random available port number
	RANDOM=$(( `date +%s` % 32767 ))
	FWD_PORT=$(( RANDOM + 10000 ))
	while (check_fwd_port $FWD_PORT); do
		FWD_PORT=$(( RANDOM + 10000 ))
	done
}

# Get dev currently used forwarding port
# $1 = dev id
function get_fwd_port()
{
	# Query tunnels db
	FWD_PORT=$(query "SELECT port FROM tunnels WHERE id='$1';" | head -1)
	[ $FWD_PORT ] || return 1
}


# Check tunnel availability
# $1 = dev id
# $2 = port number
# rv = 0 if tunnel is active
# rv = 1 if tunnel is not in DB
# rv = 2 if tunnel is expired
function check_tunnel()
{
	if [ $2 ]; then
		FWD_PORT=$2
	else
		get_fwd_port $1 || return 1
	fi
	
	if (check_fwd_port $FWD_PORT); then
		return 0
	else
		query "DELETE FROM tunnels WHERE id='$1';"
		return 2
	fi
}

# Start new tunnel
# $1 = dev id
function start_tunnel()
{
	if check_tunnel $1; then 
		echo "Tunnel listening on 127.0.0.1:$FWD_PORT" 
		return 1
	fi
	set_fwd_port

	echo "Starting SSH tunnel to dev $1 on port $FWD_PORT"
	listen $1 fwd $FWD_PORT || { echo -e "\nDevice $1 not found"; return 2; }
 	wait_tunnel $FWD_PORT || return 3

	# Add tunnel to db
	query "INSERT INTO tunnels VALUES('$1','$FWD_PORT','$(date +%s)');"
}

# Connect to the SSH server on the dev
# $1 = dev id
# $* = optional shell command
function console()
{
	start_tunnel $1
	case $? in
	0) new=1 ;;
	2) return 1;;
	esac

	[ $2 ] && { p=$* ; cmd=${p#* } ; }
	ssh $SSH_USER@127.0.0.1 -p $FWD_PORT $SSH_OPTIONS -i $SSH_KEY $cmd 2>/dev/null

	[ $new ] && stop_tunnel $1
}

# Stop active tunnel
# $1 = dev id
function stop_tunnel()
{
	if ! check_tunnel $1; then
		echo "Tunnel expired"
		return 1 
	fi

	echo "Stopping SSH tunnel to device $1 on port $FWD_PORT"
	pid=$(sudo netstat -lntp | grep 127.0.0.1:$FWD_PORT | awk '{ print $7 }')
	kill ${pid%/*}

	if (check_fwd_port $FWD_PORT); then
		echo "Unable to close tunnel"
	else
		echo "Tunnel closed"
		query "DELETE FROM tunnels WHERE id='$1';"
	fi
}

# Wait for tunnel availability
# $1 = port number
function wait_tunnel()
{
	echo -n "Waiting for tunnel establishment"
	time=0
	while [ true ]; do 
		port=$(netstat -lnt | grep -c "127.0.0.1:$1")

		if [ $port -ge 1 ]; then
			echo -e "\nTunnel ready on 127.0.0.1:$1"
			return 0
		elif [ $((time++)) -eq $SSH_PORT_FWD_WAIT ]; then 
			echo "Error: tunnel not found"
			return 1
		fi

		echo -n "." 
		sleep 1
	done
}

# Update device software
# $1 = dev id
# $2 = file to update (all|scripts|conf|<file>)
function swupdate(){
	listen $1 update $2 || { echo -e "\nDevice $1 not found"; return 1; }
}

# Show dev info
# $1 = dev id
function info()
{
	echo "command not implemented"
}

# List active devices and tunnels
# $1 = update flag
function list()
{
	# Update list
	if [ $1  ]; then
		echo "Updating devices list..."
		listen UPDATE
	fi

	# Dump devices table
	echo -e "\nDevices:"
	echo -e "ID\tIP\t\tLAST PROBE"
	IFS=$'\n' 
	for dev in $(query 'SELECT * FROM devices;'); do
		IFS=$'|' read id ip ts <<< "$dev"
		printf "%s\t%s\t%s\n" $id $ip $(date -d @$ts +"%Y-%m-%d %H:%M:%S")
	done

	# Dump tunnels table
	echo -e "\nTunnels:"
	echo -e "ID\tPORT\tSTART TIME"
	IFS=$'\n' 
	for dev in $(query 'SELECT * FROM tunnels;'); do
		IFS=$'|' read id port ts <<< "$dev"
		check_tunnel $id $port && printf "%s\t%s\t%s\n" $id $port $(date -d @$ts +"%Y-%m-%d %H:%M:%S")
	done
}

## Main ##

# Check DB
if [ ! -e $BDM_DB ]; then
	query "CREATE TABLE devices(id, ip, ts);"
	query "CREATE TABLE tunnels(id, port, ts);"
fi

# Parse command-line
parse $*

