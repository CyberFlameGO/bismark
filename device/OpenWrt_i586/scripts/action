#!/bin/bash
# Device actions script
# Provides:
# - on-demand SSH tunnel
# - server heartbeat
# - software update
# - configuration query/push
#
# author: walter.dedonato@unina.it

# Import configuration and functions
. ~/conf/dev.conf
. ~/scripts/functions

# Help screen
[ $1 ] || { echo "$(basename $0) <command> [options]" ; exit ; }

# Perform action
case $1 in
fwd)	# on-demand SSH tunnel
	if [ $2 == ${2#*:} ]; then
		( ssh $KEEP_ALIVE -N -i $SSH_KEY -R $2:127.0.0.1:22 $USER@$SERVER >/dev/null 2>&1 & )
	else
		( ssh $KEEP_ALIVE -N -i $SSH_KEY -R $2 $USER@$SERVER >/dev/null 2>&1 & )
	fi
;;
pong)	# Server heartbeat
	ltime=$(date +%s)
	stime=$(( $3 + 2 ))

	# Check clock synch
	[ $stime -gt $((ltime + 1)) ] && resync=true
	[ $stime -lt $((ltime - 1)) ] && resync=true
	if [ $resync ]; then
		ltime=$stime
		date -s @$ltime
		hwclock -w
	fi
	echo $ltime > /tmp/server_last

	# Store public IP 
	echo $2 > /tmp/ip
;;
update)	# Software update

	# Skip if same version
	[ $2 ] && [ $VERSION -eq $2 ] && { echo "Device up to date" | output $1 ; exit ; }

	# Start svn update
	svn update | output $1

	# Apply changes
	crontab ~/conf/crontab

	# Set restart flag
	touch /tmp/restart
;;
config)
	# Modify parameters	
	if [ "$2" ]; then 
		if [ "$2" == "push" ]; then
			push=1
		else
			# Copy current local.conf
			cat local.conf > /tmp/local.conf

			# Parse new configuration
			IFS=$'&'
			for param in $2; do
				name=${param%=*}
				value="${param#*=}"

				# Check generic parameter validity
				grep -q "^$name=" conf/dev.conf local.conf || { echo -e "Invalid option $name\n" >&2; continue ; }

				# Check specific parameters validity
				case $name in
				WIFI_CHANNEL) 
					[ "$value" -ge 1 -a "$value" -le 11 ] || { echo -e "WIFI_CHANNEL must be an integer from 1 to 11" >&2; continue ; }
				;;
				WIFI_SSID) 
					[ ${#value} -ge 1 -a ${#value} -le 32 ] || { echo -e "WIFI_SSID must be a string from 1 to 32 characters" >&2; continue ; }
				;;
				WIFI_SEC)
					echo "$value" | grep -q '^WPA$\|^WPA2$\|^WEP$\|^NONE$' || { echo -e "WIFI_SEC must be one of NONE,WEP,WPA,WPA2" >&2; continue ; }
				;;
				esac

				# Check WIFI parameters presence
				[ ${name:0:4} == WIFI ] && push=1
				
				# Assign new value to parameter
				eval "$name=\"$value\""

				if [ "$value" ]; then
					# Store parameter 
					if grep -q "^$name=" /tmp/local.conf; then
						# Substitute
						mod_conf /tmp/local.conf $name "$value"
					else
						# Append
						echo $name="$value" >> /tmp/local.conf
					fi
				elif grep -q "^$name=" /tmp/local.conf; then
					# Remove parameter from local.conf
					mod_conf /tmp/local.conf $name
				fi
			done

			if [ $push ]; then
				# Check wifi configuration consistency
				case $WIFI_SEC in
				WPA|WPA2)
					[ ${#WIFI_PASS} -ge 8 -a ${#WIFI_PASS} -le 64 ] || { 
						echo -e "When using WPA/WPA2, WIFI_PASS must be a string from 8 to 64 characters" >&2
						error=1
					}
				;;
				WEP) 
					echo $WIFI_PASS | gawk '
						{ 
							len=length($0) 
							if (len ~ /^5$|^13$|^16$/){ exit 0 }
							if (len ~ /^10$|^26$|^32$/ && /^[0-9a-f]+$/){ exit 0 } 
							exit 1 
						}' || { 
							echo -e "When using WEP, WIFI_PASS must be a string (5, 13, or 16 characters) or hexadecimal digits (10, 26, or 32 digits)" >&2
							error=1
						}
				;;
				esac
			fi
			[ $error ] && { push= ; rm /tmp/local.conf ; } || { mv /tmp/local.conf ~ ; cp ~/local.conf{,.bkp} ; }
		fi
	fi

	# Push configuration
	if [ $push ]; then
		uci set wireless.wl0.channel=$WIFI_CHANNEL
		uci set wireless.@wifi-iface[0].ssid=$WIFI_SSID
		uci set wireless.@wifi-iface[0].key=$WIFI_PASS
		uci commit wireless && wifi
	fi

	# Configuration output
	set | awk -F'=' '(FNR==1){ f+=1 } /=/{ if (f == 1){a[$1]=1} else { if (a[$1] == 1) print $1 "=" $2} }' ~/conf/dev.conf - | output $1
;;
esac

