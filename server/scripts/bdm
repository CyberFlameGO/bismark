#!/bin/bash
# Bismark Devices Management script
#
# author: walter.dedonato@unina.it

# Load configuration file
. ~/etc/bdm.conf

# Aliases
query(){ sqlite3 -list $BDM_DB "$1"; }

# Help screen
# $1 = command
function help() 
{
	grep -A1 "^ *$1" <<-end
	Syntax:

	    $(basename $0) [options] <command>
	
	Commands:
	
	    tunnel   <dev_id> <on|off>        Open/Close a tunnel to <dev_id> using SSH port forwarding
	
	    console  <dev_id>                 Open a console on <dev_id> over the SSH tunnel
	
	    exec     <dev_id> <command>       Execute a shell command on <dev_id>
	
	    info     <dev_id>                 Print some information about <dev_id>
	
	    list                              List available devices and tunnels
	
	    upgrade  <dev_id> [rebuild]       Upgrade software on <dev_id> (ALL applies)

	    config   <dev_id> [option=value]  Show or Change <dev_id> configuration options
	             [[option=value] ...]     Supported options: channel, ssid, wpa_psk

	    copy     <file> <dev_id>          Copy file to <dev_id> /tmp directory

	    For internal use only:

	    setuser   <dev_id> <username>     Set the SSH username for <dev_id>

	    settunnel <dev_id> <port>         Set the tunnel entry for <dev_id>

	Options:
	
	    -o <ssh_opts>    Additional SSH options
	    -p <fwd_port>    SSH tunnel port number (default: random)"
	    -t <timeout>     Max seconds to wait for messages (default: $MSG_TIMEOUT)
	end
	exit
}

# Parse command line
function parse()
{
	p=$*

	# Parse options
	while getopts 'o:p:t:' flag; do
		case $flag in
		o)
			SSH_OPTIONS+=" -$OPTARG"
		;;
		p)
			FWD_PORT=$OPTARG
		;;
		t)
			MSG_TIMEOUT=$OPTARG
		;;
		*)
			echo "Unknown option: $flag $OPTARG"
			help
		;;
		esac
	done
	shift $(( OPTIND - 1 ))	
	
	# Parse commands
	case $1 in
	tunnel)
		[ $2 ] || { echo -e "Missing parameter: <dev_id>\n"; help tunnel; }
		[ $3 ] || { echo -e "Missing parameter: on|off\n"; help tunnel; }
		[ $2 == ALL ] && { echo -e "ALL not allowed\n"; help tunnel; }
		[ $3 == "on" ] && start_tunnel $2
		[ $3 == "off" ] && stop_tunnel $2 $4
	;;
	console)
		[ $2 ] || { echo -e "Missing parameter: <dev_id>\n"; help console; }
		[ $2 == ALL ] && { echo -e "ALL not allowed\n"; help console; }
		echo "Connecting to $2"
		console $2
	;;
	exec)
		[ $2 ] || { echo -e "Missing parameter: <dev_id>\n"; help exec; }
		[ $3 ] || { echo -e "Missing parameter: <command>\n"; help exec; }
		[ $2 == ALL ] && { echo -e "ALL not allowed\n"; help exec; }
		echo "Executing \"${p#* * }\" on $2"
		console $2 ${p#* * }
	;;
	info)
		[ $2 ] || { echo -e "Missing parameter: <dev_id>\n"; help info; }
		[ $2 == ALL ] && { echo -e "ALL not allowed\n"; help info; }
		info $2
	;;
	list)	
		list $2
	;;
	upgrade)
		[ $2 ] || { echo -e "Missing parameter: <dev_id>\n"; help upgrade; }
		upgrade $2 $3 
	;;
	config)
		[ $2 ] || { echo -e "Missing parameter: <dev_id>\n"; help config; }
		[ $2 == ALL ] && { echo -e "ALL not allowed\n"; help config; }
		$* 
	;;
	setuser)
		[ $2 ] || { echo -e "Missing parameter: <dev_id>\n"; help setuser; }
		[ $3 ] || { echo -e "Missing parameter: <username>\n"; help setuser; }
		setuser $2 $3
	;;
	settunnel)
		[ $2 ] || { echo -e "Missing parameter: <dev_id>\n"; help settunnel; }
		[ $3 ] || { echo -e "Missing parameter: <port>\n"; help settunnel; }
		settunnel $2 $3
	;;
	copy)
		[ $2 ] || { echo -e "Missing parameter: <file>\n"; help copy; }
		[ $3 ] || { echo -e "Missing parameter: <dev_id>\n"; help copy; }
		copy $2 $3
	;;
	*)
		[ $1 ] && echo "Unknown command: $1"
		help
	;;
	esac
}

## Utility functions ##

# Send message 
# $1 = dev id
# $2 = command
# $3 = value
function send_msg()
{
	# Add message to queue
	if [ $1 == ALL ]; then
		# Broadcast
		for dev in $(query "SELECT id FROM devices;"); do
			query "INSERT INTO messages('from', 'to', msg) VALUES('BDM','$dev','$2 $3');"
		done
	else
		# Unicast
		query "INSERT INTO messages('from', 'to', msg) VALUES('BDM','$1','$2 $3');"

		# Wait for message delivery
		time=0
		while [ true ]; do
			rowid=$(query "SELECT rowid FROM messages WHERE \"to\"='$1' AND msg='$2 $3';")
			[ ${#rowid} -eq 0 ] && return 0
			[ $((time++)) -eq $MSG_TIMEOUT ] && return 1
			echo -n "."
			sleep 1
		done
	fi
}

# Receive message 
# $1 = dev id
function recv_msg()
{
	# Wait for message 
	time=0
	while [ true ]; do
		info=$(query "SELECT rowid,msg FROM messages WHERE \"from\"='$1';")
		if [ ${#info} -gt 0 ]; then
			IFS=$'|' read mid msg <<< "$info"

			echo "Message: $msg"
			echo "Related log:"
			awk '
				BEGIN{ out=0 }
				/^END/{ exit }
				(out == 1){ print }
				/^START '$msg'/{ out=1 }
			' ~/var/log/devices/$id.log

			query "DELETE FROM messages WHERE rowid='$mid';"
			return 0
		fi
		[ $((time++)) -eq $MSG_TIMEOUT ] && return 1
		echo -n "."
		sleep 1
	done
}

# Check forwarding port
# $1 = port number
function check_fwd_port()
{
	if [ $(netstat -lnt | grep -c "127.0.0.1:$FWD_PORT\>") -gt 0 ]; then
		return 0
	else
		return 1
	fi
}

# Set a valid SSH forwarding port
function set_fwd_port()
{
	# Test requested port number availability
	if [ $FWD_PORT ]; then
		if (check_fwd_port $FWD_PORT); then
			echo "warning: $FWD_PORT not available"
		else
			return 0
		fi
	fi

	# Find a random available port number
	RANDOM=$(( `date +%s` % 32767 ))
	FWD_PORT=$(( RANDOM + 10000 ))
	while (check_fwd_port $FWD_PORT); do
		FWD_PORT=$(( RANDOM + 10000 ))
	done
}

# Get dev currently used forwarding port
# $1 = dev id
function get_fwd_port()
{
	# Query tunnels db
	FWD_PORT=$(query "SELECT port FROM tunnels WHERE id='$1' LIMIT 1;")
	[ $FWD_PORT ] || return 1
}


# Check tunnel availability
# $1 = dev id
# $2 = port number
# rv = 0 if tunnel is active
# rv = 1 if tunnel is not in DB
# rv = 2 if tunnel is opening
# rv = 3 if tunnel is expired
function check_tunnel()
{
	if [ $2 ]; then
		FWD_PORT=$2
	else
		get_fwd_port $1 || return 1
	fi
	
	if check_fwd_port $FWD_PORT; then
		return 0
	else
		query "DELETE FROM tunnels WHERE id='$1' AND port=$FWD_PORT AND ts<$(date +%s);"
		get_fwd_port $1 && return 2 || return 3
	fi
}

# Wait for tunnel availability
# $1 = port number
function wait_tunnel()
{
	echo -en "\nWaiting for tunnel establishment"
	time=0
	while [ true ]; do 
		port=$(netstat -lnt | grep -c "127.0.0.1:$1")

		if [ $port -ge 1 ]; then
			echo -e "\nTunnel ready on 127.0.0.1:$1"
			return 0
		elif [ $((time++)) -eq $SSH_PORT_FWD_WAIT ]; then 
			echo "Error: tunnel not found"
			return 1
		fi

		echo -n "." 
		sleep 1
	done
}

## User command functions ##

# Start new tunnel
# $1 = dev id
function start_tunnel()
{
	if check_tunnel $1; then 
		echo "Tunnel listening on 127.0.0.1:$FWD_PORT" 
		return 1
	fi
	set_fwd_port

	echo "Starting SSH tunnel to dev $1 on port $FWD_PORT"
	send_msg $1 fwd $FWD_PORT || { echo -e "\nDelivery to $1 failed"; return 2; }
 	wait_tunnel $FWD_PORT || return 3
}

# Connect to the SSH server on the dev
# $1 = dev id
# $* = optional shell command
function console()
{
	if [ ! $FWD_PORT ]; then 
		start_tunnel $1
		case $? in
		0) new=1 ;;
		2) return 1;;
		esac
	fi

	[ $2 ] && { p=$* ; cmd=${p#* } ; }
	SSH_USER=$(query "SELECT user FROM devices WHERE id='$1'")
	ssh $SSH_USER@127.0.0.1 -p $FWD_PORT $SSH_OPTIONS -i $SSH_KEY $cmd 2>/dev/null

	[ $new ] && stop_tunnel $1
}

# Stop active tunnel
# $1 = dev id
function stop_tunnel()
{
	if ! check_tunnel $1; then
		echo "Tunnel expired"
		return 1 
	fi

	echo "Stopping SSH tunnel to device $1 on port $FWD_PORT"
	pid=$(sudo netstat -lntp | grep 127.0.0.1:$FWD_PORT | awk '{ print $7 }')
	kill ${pid%/*}

	if (check_fwd_port $FWD_PORT); then
		echo "Unable to close tunnel"
	else
		echo "Tunnel closed"
		query "DELETE FROM tunnels WHERE id='$1' AND port=$FWD_PORT;"
	fi
}

# Update device software
# $1 = dev id
# $2 = rebuild
function upgrade(){
	echo "Upgrading $1"

	# Update version number
	svn update ~/bismark
	svn info ~/bismark | awk '/^Rev/{ print $2 ; exit }' > ~/bismark/device/VERSION
	VERSION=$(cat ~/bismark/device/VERSION)

	# Create last release packages
	[ $2 ] && rm -f ~/bismark/device/dev-*.tgz
	for type in $DEV_TYPES; do
		if [ ! -e ~/bismark/device/dev-$type-$VERSION.tgz ]; then
			echo "Creating $type package version $VERSION:"

			# Clean & create package tree
			rm -f ~/bismark/device/dev-$type-*.tgz
			rm -rf /tmp/pkg/$type
			mkdir -p /tmp/pkg/$type
			mkdir /tmp/pkg/$type/{conf,scripts,bin,lib}

			# Copy files
			(
			 cd ~/bismark/device
			 cp VERSION /tmp/pkg/$type
			 cp -d conf/* /tmp/pkg/$type/conf
			 cp -d scripts/* /tmp/pkg/$type/scripts
			 [ -e bin/$type ] && cp -d bin/$type/* /tmp/pkg/$type/bin
			 [ -e lib/$type ] && cp -d lib/$type/* /tmp/pkg/$type/lib
			)

			# Create tgz archive
			(
			 cd /tmp/pkg/$type
			 tar -czvf ~/bismark/device/dev-$type-$VERSION.tgz *
			)
		fi
	done

	# Start upgrade script
	if check_tunnel $1; then
		echo "Executing upgrade:"
		console $1 "~/scripts/action" update
	else
		# Wait for probe packet
		send_msg $1 update || { [ $1 == ALL ] && echo done || { echo -e "\nDelivery to $1 failed"; return 1; } ; }
	fi
}

# Show dev info
# $1 = dev id
function info()
{
	echo "Obtaining information from $1"
	if check_tunnel $1; then
		console $1 "~/scripts/action" info
	else
		send_msg $1 info || { echo -e "\nDelivery to $1 failed"; return 1; }
		echo "Waiting for message from $1"
		recv_msg $1 || { echo -e "\nNo messages from $1"; return 2; }
        fi
}

# Push configuration
# $1 = dev id
# $* = options
function config()
{
	id=$1
	shift
	params=$(echo $* | tr ' ' '&')
	send_msg $id config $params || { echo -e "\nDevice $id not found"; return 1; }
	recv_msg $id || { echo -e "\nNo messages from $id"; return 2; }
}

# List active devices and tunnels
# $1 = update flag
function list()
{
	# Dump devices table
	echo -e "${BLUE}Latest version: ${WHITE}$VERSION"
	echo -e "${BLUE}\nDevices:"
	echo -e "${WHITE}ID\tIP\t\tUSER\tVERSION\tLAST PROBE"
	IFS=$'\n' 
	for dev in $(query 'SELECT id,ip,user,version,ts FROM devices ORDER BY id;'); do
		IFS=$'|' read id ip user ver ts <<< "$dev"
		off_time=$(( $(date +%s) - $ts ))
		if [ $off_time -lt 300 ]; then
			echo -ne $GREEN
		elif [ $off_time -lt 900 ]; then
			echo -ne $YELLOW
		else
			echo -ne $RED
		fi
		printf "%s\t%s\t%s\t%s\t%s\n" $id $ip $user $ver $(date -d @$ts +"%Y-%m-%d %H:%M:%S")
	done

	# Dump tunnels table
	echo -e "${BLUE}\nTunnels:"
	echo -e "${WHITE}ID\tPORT\tSTART TIME"
	echo -ne $GREEN
	IFS=$'\n' 
	for dev in $(query 'SELECT * FROM tunnels ORDER BY id;'); do
		IFS=$'|' read id port ts <<< "$dev"
		check_tunnel $id $port
		if [ $? -eq 0 ]; then
			echo -ne $GREEN
		elif [ $? -eq 2 ]; then
			echo -ne $YELLOW
		else
			echo -ne $RED
		fi
		printf "%s\t%s\t%s\n" $id $port $(date -d @$ts +"%Y-%m-%d %H:%M:%S")
	done
	echo -ne $NO_COLOR

	# Dump messages table
	echo -e "${BLUE}\nPending Messages:"
	echo -e "${WHITE}FROM\tTO\tMESSAGE"
	echo -ne $MAGENTA
	IFS=$'\n' 
	for message in $(query 'SELECT * FROM messages ORDER BY "from","to";'); do
		IFS=$'|' read from to msg <<< "$message"
		printf "%s\t%s\t%s\n" $from $to $msg
	done
	echo -ne $NO_COLOR
}

# Copy file to device /tmp directory
# $1 = file
# $2 = dev id
function copy()
{
	if [ ! $FWD_PORT ]; then 
		start_tunnel $2
		case $? in
		0) new=1 ;;
		2) return 1;;
		esac
	fi

	SSH_USER=$(query "SELECT user FROM devices WHERE id='$2'")
	scp -P $FWD_PORT $SSH_OPTIONS -i $SSH_KEY $1 $SSH_USER@127.0.0.1:/tmp  
}

## Internal commands ##

# Set device SSH username
# $1 = dev id
# $2 = username
function setuser()
{
	echo -n "Setting $1 SSH user to $2..."
	if [ $(query "SELECT id FROM devices WHERE id='$1';") ]; then
		query "UPDATE devices SET user='$2' WHERE id='$1';"
	else
		query "INSERT INTO devices (id, user) VALUES('$1','$2');"
	fi
	echo done
}

# Set device tunnel entry
# $1 = dev id
# $2 = port
function settunnel()
{
	echo -n "Setting tunnel db entry for $1 on port $2..."
	query "INSERT INTO tunnels (id, port, ts) VALUES('$1',$2,$(date +%s));"
	echo done
}


## Main ##
# Parse command-line
parse $*

