#!/bin/ash
# Executes a measurement cycle
# 
# author: walter.dedonato@unina.it

# Load configuration file
. /etc/bismark/bismark.conf
. /usr/lib/bismark/functions.inc.sh

# Configuration
COUNTER="/tmp/bismark/var/counter"
MEASURE_REPLY="/tmp/bismark/var/mreply"
XML_FILE="/tmp/bismark/active/${DEVICE_ID}_$(date +%s).xml"

# --- Functions ---

# Measure message generator
# $1 = options
msg () 
{
	echo "$DEVICE_ID measure $1"
	sleep 3
}

# Get target info
# $1 = category
# $2 = type
# $3 = zone
# $4 = duration
# Outputs: 
# $dst, $info and $wait
get_target ()
{
	# Select probe port
	if [ -e /tmp/bismark/var/port_counter ]; then
		read port_counter < /tmp/bismark/var/port_counter
		PROBE_PORT=$(echo $PROBE_PORTS | awk '{print $'$((port_counter + 1))'}')
	else
		PROBE_PORT=5353
	fi

	# Send message
	msg "$1 $2 $3 $4" | nc -u $NC_OPTS $SERVER $PROBE_PORT > $MEASURE_REPLY

	# Get reply
	read dst info wait < $MEASURE_REPLY 
	[ $dst ] || return 1 
}

# --- Main ---

# Create dirs and files
mkdir -p /tmp/bismark/active
mkdir -p /tmp/bismark/data
[ -e $COUNTER ] || echo 0 > $COUNTER

# Get and update count
count=$(cat $COUNTER)
echo $(( (count + 1) % 288 )) > $COUNTER

# Random wait
sleep $(random 0 3)

# Get source IP
get_ip

# XML file header
cat > $XML_FILE <<-end
	<?xml version="2.0" encoding="UTF-8" standalone="yes"?>
	<measurements version="1.2">
	        <info deviceid=$DEVICE_ID />
end

## Concurrent measurements ##
if [ $((count % TR_FQ)) -eq 0 ]; then
	# Traceroute
	if get_target Bismark TR $ZONE 0 ; then
		hops=$(bismark-tr $dst)
		hops_cnt=$(echo "$hops" | wc -l)
		if [ $hops_cnt -gt 0 ]; then
			cat >> $XML_FILE <<-end
			        <traceroute srcip=$src dstip=$dst timestamp=$(date +%s) hops=$hops_cnt>
				$(echo "$hops" | awk '{ print "                " $0 }')
			        </traceroute>
			end
		fi
		gwip=$(cat /tmp/bismark/active/gwip)
	fi

	# Reverse traceroute
	if get_target Bismark RTR $ZONE 0 ; then
		hops=$(bismark-rtr $dst $info)
		hops_cnt=$(echo "$hops" | wc -l)
		if [ $hops_cnt -gt 0 ]; then
			cat >> $XML_FILE <<-end
			        <traceroute srcip=$dst dstip=$src timestamp=$(date +%s) hops=$hops_cnt>
				$(echo "$hops" | awk '{ print "                " $0 }')
			        </traceroute>
			end
		fi
	fi
fi

# Get Gateway IP
if [ ! "$gwip" ]; then
	bismark-tr "8.8.8.8" > /dev/null
	[ -e /tmp/bismark/active/gwip ] && gwip=$(cat /tmp/bismark/active/gwip)
fi

# RTT measurements using PING
if get_target Bismark PING $ZONE 10 ; then
	# Last mile RTT
	if [ "$gwip" ]; then
		( bismark-ping $gwip | bismark-mstats LMRTT PING $src $gwip > /tmp/bismark/active/lmrtt ; cat /tmp/bismark/active/lmrtt >> $XML_FILE ) &
	fi

	# Geo-distributed servers RTT
	mkdir -p /tmp/bismark/active/gdrtt
	for srv in $(grep -v ^# /usr/lib/bismark/world_ips.list); do
		( bismark-ping $srv | bismark-mstats RTT PING $src $srv > /tmp/bismark/active/gdrtt/$srv ; cat /tmp/bismark/active/gdrtt/$srv >> $XML_FILE ) &
	done

	# MServer RTT
	bismark-ping $dst | bismark-mstats RTT PING $src $dst >> $XML_FILE 
fi

# DNS delay and failure
if [ $((count % DNS_FQ)) -eq 0 ]; then
	bismark-dns >> $XML_FILE
fi

## Serial measurements ##
if [ ! -e /tmp/bismark/var/mlock ]; then 
	# Set measure lock
	echo $(date +%s) > /tmp/bismark/var/mlock

	# Bitrate
	if [ $((count % BR_FQ)) -eq 0 ]; then
		# Downstream bitrate using NETPERF
		if get_target Bismark NETPERF $ZONE $BR_DURATION ; then
			sleep $wait
			( sleep 3 ; bismark-ping $dst | bismark-mstats ULRTTDW PING $src $dst >> $XML_FILE ) &
			bismark-netperf $BR_DURATION $NETPERF_NTHREADS $dst dw > /tmp/bismark/active/netperf-out
			cat /tmp/bismark/active/netperf-out | bismark-mstats BITRATE NETPERF $dst $src | grep -v nan >> $XML_FILE
			rm /tmp/bismark/active/netperf-out
		fi

		# Upstream bitrate using NETPERF
		if get_target Bismark NETPERF $ZONE $BR_DURATION ; then
			sleep $wait
			( sleep 3 ; bismark-ping $dst | bismark-mstats ULRTTUP PING $src $dst >> $XML_FILE ) &
			bismark-netperf $BR_DURATION $NETPERF_NTHREADS $dst up > /tmp/bismark/active/netperf-out
			cat /tmp/bismark/active/netperf-out | bismark-mstats BITRATE NETPERF $src $dst | grep -v nan >> $XML_FILE
			rm /tmp/bismark/active/netperf-out
		fi
	fi

	# Jitter & Packet loss using DITG
	if [ $((count % UDP_FQ)) -eq 0 ]; then
		# Downstream 
		if get_target Bismark ITGDL $ZONE $UDP_DURATION ; then
			sleep $wait
			bismark-ditg udp $dst $info dw $UDP_DURATION $UDP_PPS >> $XML_FILE
		fi

		# Upstream
		if get_target Bismark ITGUL $ZONE $UDP_DURATION ; then
			sleep $wait
			bismark-ditg udp $dst $info up $UDP_DURATION $UDP_PPS >> $XML_FILE
		fi
	fi

	# Shaper probe
	if [ $((count % SP_FQ)) -eq 0 ]; then
		if get_target Bismark SP $ZONE 150 ; then
			sleep $wait
			bismark-sp $dst >> $XML_FILE
		fi
	fi

	# Release measure lock
	rm /tmp/bismark/var/mlock
else
	# Check lock
	locktime=$(cat /tmp/bismark/var/mlock)
	currtime=$(date +%s)
	if [ $((currtime - locktime)) -gt 400  ]; then
		killall netperf prober ITGRecv ITGSend
		rm /tmp/bismark/var/mlock
	fi
fi

# XML file footer
sleep 5
cat >> $XML_FILE <<-end
	</measurements>
end

# Move file to data folder
mv $XML_FILE /tmp/bismark/data

# Upload result
[ -e /tmp/bismark/ssh ] || { 
	echo -e '#!/bin/ash\nexec ssh -y "$@"' > /tmp/bismark/ssh 
	chmod +x /tmp/bismark/ssh 
}

scp -S "/tmp/bismark/ssh" -i $SSH_KEY /tmp/bismark/data/*.xml $USER@$SERVER:var/data && rm /tmp/bismark/data/*.xml
