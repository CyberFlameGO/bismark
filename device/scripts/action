#!/bin/bash
# Device actions script
# Provides:
# - on-demand SSH tunnel
# - server heartbeat
# - software update
# - configuration query/push
#
# author: walter.dedonato@unina.it

# Import configuration and functions
. ~/conf/dev.conf
. ~/scripts/functions

# Help screen
[ $1 ] || { echo "$(basename $0) <command> [options]" ; exit ; }

# Platform depending options
case $DEVICE_ID in
LS*) WIF="wl0"  ;;
NB*) WIF="ath0" ;;
esac

# Perform action
case $1 in
fwd)	# on-demand SSH tunnel
	ssh $KEEP_ALIVE -N -i $SSH_KEY -R $2:127.0.0.1:22 $USER@$SERVER &
;;
pong)	# Server heartbeat
	date +%s > /tmp/server_last
	echo $2 > /tmp/ip
;;
update)	# Software update
	cd ~

	# Skip if same version
	[ $2 ] && [ $VERSION -eq $2 ] && { echo "Device up to date" ; exit ; }

	# Get new bismark package
	scp -q -i $SSH_KEY $USER@$SERVER:~/bismark/device/dev-${DEVICE_ID:0:2}-*.tgz /tmp/dev.tgz

	# Remove old scripts and configuration files
	find * -path "conf/*" | sort > /tmp/old
	find * -path "scripts/*" | sort >> /tmp/old
	tar -tzf /tmp/dev.tgz | sort > /tmp/new
	case $DEVICE_ID in
	LS*) rm -f $(diff /tmp/old /tmp/new | awk -F- '/^-[a-zA-Z]/{ print $2 }' | grep -v 'rshell\|action\|probe') ;;
	NB*) 
		files=$(diff /tmp/old /tmp/new | awk '/^</{ print $2 }' | grep -v 'rshell\|action\|probe')
		rm -f $files
		remountrw
		rm -f $(echo "$files" | awk '/^</{ print "/ro/root/" $2 }')
		remountro
	;;
	WS*) rm -f $(diff /tmp/old /tmp/new | awk '/^</{ print $2 }' | grep -v 'rshell\|action\|probe') ;;
	esac

	# Extract new package
	tar -xzf /tmp/dev.tgz
	rm /tmp/dev.tgz

	# Apply changes
	crontab conf/crontab
	[ ${DEVICE_ID:0:2} == "NB" ] && /noxbox/bin/persist_changes

	# Send diff
	diff /tmp/old /tmp/new | output $1 
	rm /tmp/old /tmp/new

	# Check installed packages
	case $DEVICE_ID in
	LS*)
		opkg update
		pkgs=$(grep ^LS ~/conf/packages.conf | cut -f2)
		for pkg in $pkgs; do
			opkg list_installed | grep -q $pkg || opkg install $pkg 
		done
	;;
	esac
;;
config)
	# Modify parameters	
	if [ $2 ]; then
		# Parse new configuration
		IFS=$'&'
		for param in $2; do
			name=${param%=*}
			value=${param#*=}

			# Check parameter validity
			grep -q "^$name=" conf/dev.conf || { echo -e "Invalid option $name\n" ; continue ; }
			
			# Assign new value to parameter
			eval $name=$value

			# Check WIFI parameters presence
			if [ ${name:0:4} == WIFI ]; then
				wifi=1
			else
				if [ $value ]; then
					# Store parameter in local.conf
					if grep -q "^$name=" local.conf; then
						# Substitute
						mod_conf local.conf $name "$value"
					else
						# Append
						echo $param >> local.conf
					fi
				elif grep -q "^$name=" local.conf; then
					# Remove parameter from local.conf
					mod_conf local.conf $name
				fi
			fi
		done

		# Push WIFI configuration
		if [ $wifi ]; then
			case $DEVICE_ID in
			LS*) 
				uci set wireless.wl0.channel=$WIFI_CHANNEL
				uci set wireless.@wifi-iface[0].ssid=$WIFI_SSID
				uci set wireless.@wifi-iface[0].key=$WIFI_WPA_PSK
				uci commit wireless && wifi
			;;
			NB*) 
				mod_conf /etc/hostapd/hostapd.conf channel $WIFI_CHANNEL
				mod_conf /etc/hostapd/hostapd.conf ssid $WIFI_SSID
				echo "00:00:00:00:00:00\"$WIFI_WPA_PSK" > /etc/hostapd/wpa_psk
				/etc/init.d/hostapd restart
				iwconfig $WIF channel $WIFI_CHANNEL
				/noxbox/bin/persist_files /etc/hostapd/hostapd.conf /etc/hostapd/wpa_psk
			;;
			esac
		fi
	fi

	# Configuration output
	set | awk -F'=' '(FNR==1){ f+=1 } /=/{ if (f == 1){a[$1]=1} else { if (a[$1] == 1) print $1 "=" $2} }' conf/dev.conf - | output $1
;;
esac

